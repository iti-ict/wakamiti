#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#

rest.define.contentType={word} como el tipo de contenido REST
rest.define.baseURL=la URL base {url}
rest.define.service=el servicio REST {text}
rest.define.subject=* identificad(o|a|os|as) por {text}
rest.define.request.parameters=los siguientes parámetros de solicitud:
rest.define.request.parameter=el parámetro de solicitud {name:text} con el valor {value:text}
rest.define.query.parameters=los siguientes parámetros de búsqueda:
rest.define.query.parameter=el parámetro de búsqueda {name:text} con el valor {value:text}
rest.define.path.parameters=los siguientes parámetros de ruta:
rest.define.path.parameter=el parámetro de ruta {name:text} con el valor {value:text}
rest.define.headers=las siguientes cabeceras:
rest.define.header=la cabecera {name:text} con el valor {value:text}
rest.define.timeout.millis=un timeout de {int} milisegundos
rest.define.timeout.secs=un timeout de {int} segundos
rest.define.failure.http.code.assertion=(que) toda petición se considera fallida si su código HTTP {integer-assertion}
rest.define.auth.basic=(que) el servicio usa autenticación básica con las credenciales {username:text}:{password:text}
rest.define.auth.bearer.token=(que) el servicio usa autenticación oauth con el token {text}
rest.define.auth.bearer.token.file=(que) el servicio usa autenticación oauth con el token del fichero {file}
rest.define.auth.bearer.default=(que) el servicio usa autenticación oauth
rest.define.auth.bearer.password=(que) el servicio usa autenticación oauth con las credenciales {username:text}:{password:text}
rest.define.auth.bearer.password.parameters=\
  (que) el servicio usa autenticación oauth con las credenciales {username:text}:{password:text} y los siguientes parámetros:
rest.define.auth.bearer.client=(que) el servicio usa autenticación oauth con las credenciales del cliente
rest.define.auth.bearer.client.parameters=\
  (que) el servicio usa autenticación oauth con las credenciales del cliente y los siguientes parámetros:
rest.define.auth.none=(que) el servicio no usa autenticación
rest.define.multipart.subtype={text} como subtipo multiparte
rest.define.attached.file=(que) se incluye el fichero adjunto {name:text} con el contenido del fichero {file}
rest.define.attached.data=(que) se incluye el fichero adjunto {name:text} con los siguientes datos:

rest.execute.GET.query=se realiza la búsqueda *
rest.execute.GET.subject=se consulta(n) *
rest.execute.DELETE.subject=se elimina(n) *
rest.execute.PUT.subject.from.document=se reemplaza(n) * con los siguientes datos:
rest.execute.PUT.subject.from.file=se reemplaza(n) * con los datos del fichero {file}
rest.execute.PUT.subject.empty=se reemplaza(n) (!con los)
rest.execute.PATCH.subject.from.document=se modifica(n) * con los siguientes datos:
rest.execute.PATCH.subject.from.file=se modifica(n) * con los datos del fichero {file}
rest.execute.PATCH.subject.empty=se modifica(n) (!con los)
rest.execute.POST.subject.from.document=se crea(n) * con los siguientes datos:
rest.execute.POST.subject.from.file=se crea(n) * con los datos del fichero {file}
rest.execute.POST.subject.empty=se crea(n) (!con los)
rest.execute.POST.data.from.document=se envía al servicio los siguientes datos:
rest.execute.POST.data.from.file=se envía al servicio los datos del fichero {file}
rest.execute.POST.data.empty=se envía al servicio la información

rest.assert.response.HTTP.code=el código de respuesta HTTP {integer-assertion}
rest.assert.response.body.strict.from.document=la respuesta es exactamente:
rest.assert.response.body.strict.from.file=la respuesta es exactamente el contenido del fichero {file}
rest.assert.response.body.strict.from.document.any-order=la respuesta es exactamente \\(en cualquier orden\\):
rest.assert.response.body.strict.from.file.any-order=la respuesta es exactamente el contenido del fichero {file} \\(en cualquier orden\\)
rest.assert.response.body.loose.from.document=la respuesta es parcialmente:
rest.assert.response.body.loose.from.file=la respuesta es parcialmente el contenido del fichero {file}
rest.assert.response.body.contentType=el tipo de contenido de la respuesta es {word}
rest.assert.response.body.length=el tamaño de la respuesta {matcher:integer-assertion}
rest.assert.response.body.header.text=el texto de la cabecera de la respuesta {name:word} {matcher:text-assertion}
rest.assert.response.body.header.integer=el entero de la cabecera de la respuesta {name:word} {matcher:integer-assertion}
rest.assert.response.body.header.decimal=el decimal la cabecera de la respuesta {name:word} {matcher:decimal-assertion}
rest.assert.response.body.fragment.text=el texto del fragmento de la respuesta {fragment:text} {matcher:text-assertion}
rest.assert.response.body.fragment.integer=el entero del fragmento de la respuesta {fragment:text} {matcher:integer-assertion}
rest.assert.response.body.fragment.decimal=el decimal del fragmento de la respuesta {fragment:text} {matcher:decimal-assertion}
rest.assert.response.body.schema.from.document=la respuesta cumple el siguiente esquema:
rest.assert.response.body.schema.from.file=la respuesta cumple el esquema del fichero {file}
