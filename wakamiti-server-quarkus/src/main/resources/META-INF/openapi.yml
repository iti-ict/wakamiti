openapi: 3.0.3
info:
  title: Wakamiti Execution Server API
  version: "1.0"
  summary: REST API to execute Wakamiti test plans
paths:
  /executions:

    get:
      summary: Obtain the executions launched in a session
      security:
        - bearerAuthorization: []
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/ListWakamitiExecution'
        "401":
          $ref: '#/components/responses/UnauthorizedError'

    post:
      summary: Send either a resource or a set of resources to be executed as a Wakamiti test plan
      description: |
        Send resources to the server to be executed as a Wakamiti test plan.<br/>
        This operation can work in three different ways:<br/>
        <li>
          <b>Send a single resource in the request body as plain text</b><br/>
          For simple test plans formed by a single file. The parameter <code>resourceType</code> must be informed.
        </li>
        <li>
          <b>Send a set of resources in the request body as a JSON object</b><br/>
          For medium plans formed by a set of files, including a configuration file.<br/>
          The request body would be a JSON object where each property name is a file path and its value is 
          the file content, with the proper characters escaped.
        </li>
        <li>
          <b>Sending a local directory and no body</b><br/>
          For medium-large plans that are stored in the same machine that the execution server. The parameter
          <code>workspace</code> must be informed.<br/>
          This should be the preferred method for large projects, due to the amount of net traffic required 
          otherwise.
        </li>
      parameters:
        - name: async
          description: |
            When true, the operation would return immediately and the test plan is executed as background process.<br/>
            When false, the operacion would wait until the test plan is executed, and return the test results.
          in: query
          schema:
            type: boolean
            default: false
          required: false  
        - name: resourceType
          description: Only used when a single resource is sent as plain text. Set the Wakamiti resource type for that content.
          in: query
          schema:
            type: string
          example: gherkin  
        - name: workspace
          description: The local path where the test resources are located. The request body must be empty.
          in: query
          schema:
            type: string
          example: /home/john/projects/my-project/test/resources  
      requestBody:
        content:
          text/plain;charset=UTF-8:
            schema:
              type: string
            example: |
              # language: es
              @implementation
              Característica: Operaciones con usuarios
              -------------------------------------------------

              Antecedentes:
                  Dada la URL de conexión a BBDD 'jdbc:h2:tcp://localhost:9092/~/test' usando el usuario 'sa' y la contraseña ''
                  Y la URL base http://localhost:9191
                  Y el servicio REST '/users'

              # redefinition.stepMap: 2-1-2
              @ID-1
              Escenario: Se consulta un usuario existente

                  Dado un usuario identificado por '3'
                  Y que se ha insertado los siguientes datos en la tabla de BBDD USER:
                  | ID | FIRST_NAME | LAST_NAME             |
                  | 3  | Pepe       | Perez Marintez Pepito |
                  Cuando se consulta el usuario
                  Entonces el código de respuesta HTTP es 200

                  Y la respuesta es parcialmente:
                  """
                      RESPONSE
                  """
          application/json;charset=UTF-8:
            schema: 
              $ref: '#/components/schemas/dictionary'
            example: |
              {
              "wakamiti.yaml": "wakamiti:\r\n  resourceTypes:\r\n    - gherkin",
              "example.feature": "# language: es\r\nCaracterística: Operaciones con usuarios\r\n-------------------------------------------------\r\n\r\n    Antecedentes:\r\n        Dada la URL de conexión a BBDD 'jdbc:h2:tcp:\/\/localhost:9092\/~\/test' usando el usuario 'sa' y la contraseña ''\r\n        Y la URL base http:\/\/localhost:9191\r\n        Y el servicio REST '\/users'\r\n\r\n    # redefinition.stepMap: 2-1-2\r\n    @ID-1\r\n    Escenario: Se consulta un usuario muy bonito\r\n\r\n        Dado un usuario identificado por '3'\r\n        Y que se ha insertado los siguientes datos en la tabla de BBDD USER:\r\n        | ID | FIRST_NAME | LAST_NAME             |\r\n        | 3  | Pepe       | Perez Marintez Pepito |\r\n        Cuando se consulta el usuario\r\n        Entonces el código de respuesta HTTP es 200\r\n\r\n        Y la respuesta es parcialmente:\r\n        \"\"\"json\r\n            RESPONSE\r\n        \"\"\""
              }

      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/WakamitiExecution'
        "401":
          $ref: '#/components/responses/UnauthorizedError'


  /executions/{executionID}:
    get:
      parameters:
        - name: executionID
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                $ref: '#/components/schemas/WakamitiExecution'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
 

  /wakamiti/configuration:
    summary: Retrieve the default Wakamiti configuration
    description: |
      Returns a dictionary (pairs of key-value) with all Wakamiti configuration
      properties that are applied by default to every execution,
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dictionary'


  /wakamiti/contributors:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MapObjectObject'
  /plans:
    post:
      description: |
        Send resources to the server to be analyzed. It returns the test plan that would be executed but without executing it.<br/>
        This operation can work in three different ways:<br/>
        <li>
          <b>Send a single resource in the request body as plain text</b><br/>
          For simple test plans formed by a single file. The parameter <code>resourceType</code> must be informed.
        </li>
        <li>
          <b>Send a set of resources in the request body as a JSON object</b><br/>
          For medium plans formed by a set of files, including a configuration file.<br/>
          The request body would be a JSON object where each property name is a file path and its value is 
          the file content, with the proper characters escaped.
        </li>
        <li>
          <b>Sending a local directory and no body</b><br/>
          For medium-large plans that are stored in the same machine that the execution server. The parameter
          <code>workspace</code> must be informed.<br/>
          This should be the preferred method for large projects, due to the amount of net traffic required 
          otherwise.
        </li>
      parameters:
        - name: resourceType
          description: Only used when a single resource is sent as plain text. Set the Wakamiti resource type for that content (e.g. <code>gherkin</code>).
          in: query
          schema:
            type: string
        - name: workspace
          description: The local path where the test resources are located. The request body must be empty.
          in: query
          schema:
            type: string

      requestBody:
        content:
          text/plain;charset=UTF-8,*/*:
            schema:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json;charset=UTF-8:
              schema:
                type: string
  /tokens:
    get:
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string



components:


  schemas:
    ListWakamitiExecution:
      type: array
      items:
        $ref: '#/components/schemas/WakamitiExecution'
    WakamitiExecution:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/PlanNodeSnapshot'
        executionID:
          type: string
        executionInstant:
          type: string
        owner:
          type: string
    PlanNodeSnapshot:
      type: object
      properties:
        children:
          $ref: '#/components/schemas/ListPlanNodeSnapshot'
        childrenResults:
          $ref: '#/components/schemas/counters'
        dataTable:
          type: array
          items:
            type: array
            items:
              type: string
        description:
          $ref: '#/components/schemas/ListString'
        displayName:
          type: string
        document:
          type: string
        documentType:
          type: string
        duration:
          format: int64
          type: integer
        errorMessage:
          type: string
        errorTrace:
          type: string
        executionID:
          type: string
        finishInstant:
          type: string
        id:
          type: string
        keyword:
          type: string
        language:
          type: string
        name:
          type: string
        nodeType:
          $ref: '#/components/schemas/NodeType'
        properties:
          $ref: '#/components/schemas/dictionary'
        result:
          $ref: '#/components/schemas/Result'
        snapshotInstant:
          type: string
        source:
          type: string
        startInstant:
          type: string
        tags:
          $ref: '#/components/schemas/ListString'
        testCaseResults:
          $ref: '#/components/schemas/counters'
    ListPlanNodeSnapshot:
      type: array
      items:
        $ref: '#/components/schemas/PlanNodeSnapshot'
    ListString:
      type: array
      items:
        type: string
    Result:
      enum:
        - ERROR
        - FAILED
        - PASSED
        - SKIPPED
        - UNDEFINED
      type: string
    NodeType:
      enum:
        - AGGREGATOR
        - STEP
        - STEP_AGGREGATOR
        - TEST_CASE
        - VIRTUAL_STEP
      type: string
    dictionary:
      $ref: '#/components/schemas/dictionary'
      description: A JSON object formed by pairs of key - text
      example: |
        {
          "generateOutputFile": "true",
          "idTagPattern": "ID-(.*)",
          "junit.treatStepsAsTests": "false",
          "logs.showElapsedTime": "true",
          "logs.showLogo": "true",
          "logs.showStepSource": "false",
          "outputFilePath": "wakamiti.json",
          "redefinition.definitionTag": "definition",
          "redefinition.enabled": "true",
          "redefinition.implementationTag": "implementation",
          "report.generation": "true",
          "resourcePath": "."
        }
    counters:
      $ref: '#/components/schemas/counters'
      description: A JSON object formed by pairs of key - number
      example: |
        {
          "PASSED": 13,
          "FAILED": 2,
          "SKIPPED": 3
        }
    MapObjectObject:
      $ref: '#/components/schemas/MapObjectObject'


  responses:
    UnauthorizedError:
      description: |
        UNAUTHORIZED<br/>
        This HTTP error code is returned when attempting to execute the operation without a session token.



  securitySchemes:
    bearerAuthorization:
      type: http
      scheme: bearer
      bearerFormat: JWT
      tokenUrl: http://localhost:8080/tokens
