{"hash":"467e1d47797343cc3e44703d424542181f90aa56","data":{"doc":{"title":"Groovy steps","path":"/en/plugins/groovy/","date":"20. January 2023","content":"<p>This plugin provides a <code class=\"language-text\">groovy</code> class compiler and steps for <code class=\"language-text\">groovy</code> code execution.</p>\n<hr>\n<ul id=\"toc\">\n<li><a href=\"#compiler\">Compiler</a></li>\n<li>\n<p><a href=\"#steps\">Steps</a></p>\n<ul>\n<li><a href=\"#execute-code\">Execute code</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#dynamic-properties\">Dynamic properties</a></p>\n<ul>\n<li><a href=\"#groovy-property\">Groovy property</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"compiler\"><a href=\"#compiler\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compiler</h2>\n<p>The groovy compiler will attempt to compile any file with <code class=\"language-text\">.groovy</code> extension present in the working directory (or\nsubdirectory). All libraries used in <code class=\"language-text\">.groovy</code> files must be included in the Wakamiti core, or in the configuration\n<a href=\"/wakamiti//en/wakamiti/architecture#wakamitilaunchermodules\"><code class=\"language-text\">wakamiti.launcher.modules</code></a>.</p>\n<p>These <code class=\"language-text\">groovy</code> files can be used as a provider of additional steps.</p>\n<h4 id=\"examples\"><a href=\"#examples\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Examples</h4>\n<p>We create a file called <code class=\"language-text\">custom-steps.properties</code> where we define a new step:</p>\n<pre class=\"language-properties\"><span class=\"token key attr-name\">custom.step</span><span class=\"token punctuation\">=</span><span class=\"token value attr-value\">the user's password {name:text} is retrieved</span></pre>\n<p>We create a file called <code class=\"language-text\">CustomSteps.goovy</code> where we develop the new step:</p>\n<pre class=\"language-groovy\"><span class=\"token keyword\">package</span> example\n\n<span class=\"token keyword\">import</span> es<span class=\"token punctuation\">.</span>iti<span class=\"token punctuation\">.</span>wakamiti<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span>I18nResource\n<span class=\"token keyword\">import</span> es<span class=\"token punctuation\">.</span>iti<span class=\"token punctuation\">.</span>wakamiti<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>annotations<span class=\"token punctuation\">.</span>Step\n<span class=\"token keyword\">import</span> es<span class=\"token punctuation\">.</span>iti<span class=\"token punctuation\">.</span>wakamiti<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>WakamitiLogger\n<span class=\"token keyword\">import</span> imconfig<span class=\"token punctuation\">.</span>Configurable\n<span class=\"token keyword\">import</span> imconfig<span class=\"token punctuation\">.</span>Configuration\n<span class=\"token keyword\">import</span> org<span class=\"token punctuation\">.</span>slf4j<span class=\"token punctuation\">.</span>Logger\n\n<span class=\"token annotation punctuation\">@I18nResource</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"custom-steps\"</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomSteps</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StepContributor</span><span class=\"token punctuation\">,</span> Configurable <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> Logger log <span class=\"token operator\">=</span> WakamitiLogger<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"es.iti.wakamiti.example\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> String username\n  <span class=\"token keyword\">private</span> String password\n  \n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>Configuration configuration<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    username <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"credentials.username\"</span></span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span>\n    password <span class=\"token operator\">=</span> configuration<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"credentials.password\"</span></span><span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span>null<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token annotation punctuation\">@Step</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">\"custom.step\"</span></span><span class=\"token punctuation\">,</span> args <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token interpolation-string\"><span class=\"token string\">\"name:text\"</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">customStep</span><span class=\"token punctuation\">(</span>String name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">==</span> username<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">\"Hello, {}! Your password is {}\"</span></span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> password\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>We include this new class in the configuration\n<a href=\"/wakamiti//en/wakamiti/architecture#wakamitinonRegisteredStepProviders\"><code class=\"language-text\">wakamiti.nonRegisteredStepProviders</code></a> of Wakamiti, and add the\nproperties with the credentials:</p>\n<pre class=\"language-yml\">  <span class=\"token key atrule\">nonRegisteredStepProviders</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> example.CustomSteps\n  <span class=\"token key atrule\">credentials</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> user\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> s3cr3t</pre>\n<p>We create an <code class=\"language-text\">example.feature</code> file with the custom step:</p>\n<pre class=\"language-gherkin\"><span class=\"token feature\"><span class=\"token keyword\">Feature:</span><span class=\"token important\"> Custom steps example</span>\n</span>  <span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> Test</span></span>\n    <span class=\"token atrule\">When</span> the user<span class=\"token string\">'s password '</span>user' is retrieved</pre>\n<p>When executed, it would be shown in the log:</p>\n<pre class=\"language-text\">[e.i.w.c.r.PlanNodeLogger.logStepResult]   INFO -  [ PASSED ]  When the user&#39;s password &#39;user&#39; is retrieved (0.011) \n[e.i.w.example.CustomSteps.customStep]   INFO - Hello, user! Your password is s3cr3t</pre>\n<hr>\n<h2 id=\"steps\"><a href=\"#steps\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Steps</h2>\n<h3 id=\"execute-code\"><a href=\"#execute-code\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Execute code</h3>\n<pre class=\"language-text\">(that) the following groovy code is executed:</pre>\n<p>Runs the given groovy script with the available variables:</p>\n<ul>\n<li><code class=\"language-text\">ctx</code>: Context of the scenario. This is a container with the <code class=\"language-text\">id</code> of the scenario, the results of the different steps,\nand any other variables you add.</li>\n<li><code class=\"language-text\">log</code>: Wakamiti logger to debug the script.</li>\n</ul>\n<h4 id=\"parameters\"><a href=\"#parameters\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Parameters</h4>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Wakamiti type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td></td>\n<td><code class=\"language-text\">document</code></td>\n<td>Script content</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"examples-1\"><a href=\"#examples-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Examples</h4>\n<pre class=\"language-gherkin\"><span class=\"token tag\">@ID-01</span>\n<span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> Example</span></span>\n  <span class=\"token atrule\">When</span> the following groovy code is executed:\n    <span class=\"token pystring string\">\"\"\"groovy\n    ctx['a'] = 'something'\n    1+1\n    \"\"\"</span>\n  <span class=\"token atrule\">And</span> the following groovy code is executed:\n    <span class=\"token pystring string\">\"\"\"groovy\n    log.debug(\"Context: {}\", ctx)\n    assert ctx.results[0] == 2\n    assert ctx.a == 'something'\n    assert ctx.id == 'ID-01'\n    \"\"\"</span></pre>\n<hr>\n<h2 id=\"dynamic-properties\"><a href=\"#dynamic-properties\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dynamic properties</h2>\n<h3 id=\"groovy-property\"><a href=\"#groovy-property\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Groovy property</h3>\n<p>Get the result of executing a line of groovy code, using the syntax <code class=\"language-text\">${=[expression]}</code>, where <code class=\"language-text\">[expression]</code> is the\ngroovy code to be executed. This expression also includes the variable <code class=\"language-text\">ctx</code>.</p>\n<h4 id=\"examples-2\"><a href=\"#examples-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Examples</h4>\n<p>We have the following scenario:</p>\n<pre class=\"language-gherkin\"><span class=\"token tag\">@ID-01</span>\n<span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> Example</span></span>\n  <span class=\"token atrule\">When</span> the SQL script file <span class=\"token string\">'data/${=ctx.id}/script-${=new Date().format(\"yyyyMMdd\")}.sql'</span> is executed</pre>\n<p>Assuming today is <code class=\"language-text\">2023-09-20</code>, when executed, it would resolve as:</p>\n<pre class=\"language-gherkin\"><span class=\"token tag\">@ID-01</span>\n<span class=\"token scenario\"><span class=\"token keyword\">Scenario:</span><span class=\"token important\"> Example</span></span>\n  <span class=\"token atrule\">When</span> the SQL script file <span class=\"token string\">'data/ID-01/script-20230920.sql'</span> is executed</pre>\n"}},"context":{"id":"1654315f00966ef60347319f48d821f1","path":"/en/plugins/groovy/","locale":"en"}}