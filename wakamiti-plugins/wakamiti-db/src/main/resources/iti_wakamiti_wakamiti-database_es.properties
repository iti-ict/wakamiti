#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#

# configuration steps
db.define.connection.parameters=la URL de conexión a BBDD {url:text} usando el usuario {username:text} y la contraseña {password:text}
db.define.cleanup.document=Al finalizar, se ejecuta el siguiente script SQL:
db.define.cleanup.file=Al finalizar, se ejecuta el script SQL del fichero {file}

# script execution steps
db.action.script.document=se ejecuta el siguiente script SQL:
db.action.script.file=se ejecuta el script SQL del fichero {file}

# delete data execution steps
db.action.clear.table.all=se limpia la tabla de BBDD {word}
db.action.clear.table.row.one.column=se (ha) elimina(n|do) * con {column:word} = {value:text} de la tabla de BBDD {table:word}
db.action.clear.table.row.two.columns=se (ha) elimina(n|do) * con {column1:word} = {value1:text} y {column2:word} = {value2:text} de la tabla de BBDD {table:word}
db.action.delete.from.data=se (ha) elimina(do) (lo|el|la|los|las) siguiente(s) * de la tabla de BBDD {word}:
db.action.delete.from.xls=se (ha) elimina(do) el contenido del fichero XLS {file} de la BBDD 
db.action.delete.from.csv=se (ha) elimina(do) el contenido del fichero CSV {csv:file} de la tabla de BBDD {table:word}

# insert data execution steps
db.action.insert.from.data=se (ha) inserta(do) (lo|el|la|los|las) siguiente(s) * en la tabla de BBDD {word}:
db.action.insert.from.xls=se (ha) inserta(do) el contenido del fichero XLS {file} en la BBDD 
db.action.insert.from.csv=se (ha) inserta(do) el contenido del fichero CSV {csv:file} en la tabla de BBDD {table:word}

# data presence assertion steps
db.assert.table.exists.row.single.id=* identificad(o|a|os|as) por {id:text} existe(n) en la tabla de BBDD {table:word}
db.assert.table.not.exists.row.single.id=* identificad(o|a|os|as) por {id:text} no existe(n) en la tabla de BBDD {table:word}
db.assert.table.exists.row.one.column=* con {column:word} = {value:text} existe(n) en la tabla de BBDD {table:word}
db.assert.table.not.exists.row.one.column=* con {column:word} = {value:text} no existe(n) en la tabla de BBDD {table:word}
db.assert.table.count.row.one.column=el número de * con {column:word} = {value:text} en la tabla de BBDD {table:word} {matcher:long-assertion}
db.assert.table.exists.row.two.columns=* con {column1:word} = {value1:text} y {column2:word} = {value2:text} existe(n) en la tabla de BBDD {table:word}
db.assert.table.not.exists.row.two.columns=* con {column1:word} = {value1:text} y {column2:word} = {value2:text} no existe(n) en la tabla de BBDD {table:word}
db.assert.table.count.row.two.columns=el número de * con {column1:word} = {value1:text} y {column2:word} = {value2:text} en la tabla de BBDD {table:word} {matcher:long-assertion}
db.assert.table.exists.sql.where=* que satisface(n) la siguiente cláusula SQL existe(n) en la tabla de BBDD {table:word}:
db.assert.table.not.exists.sql.where=* que satisface(n) la siguiente cláusula SQL no existe(n) en la tabla de BBDD {table:word}:
db.assert.table.count.sql.where=el número de * que satisfacen la siguiente cláusula SQL en la tabla de BBDD {table:word} {matcher:long-assertion}:
db.assert.table.exists.data=(el|los) siguiente(s) registro(s) existe(n) en la tabla de BBDD {table:word}:
db.assert.table.not.exists.data=(el|los) siguiente(s) registro(s) no existe(n) en la tabla de BBDD {table:word}:
db.assert.table.count.data=el número de * que satisfacen (lo|el|la|los|las) siguiente(s) * en la tabla de BBDD {table:word} {matcher:long-assertion}:
db.assert.table.exists.xls=el contenido del fichero XLS {file} existe en la base de datos
db.assert.table.not.exists.xls=el contenido del fichero XLS {file} no existe en la base de datos
db.assert.table.exists.csv=el contenido del fichero CSV {csv:file} existe en la tabla de BBDD {table:word}
db.assert.table.not.exists.csv=el contenido del fichero CSV {csv:file} no existe en la tabla de BBDD {table:word}
db.assert.table.empty=la tabla de BBDD {word} está vacía
db.assert.table.not.empty=la tabla de BBDD {word} no está vacía