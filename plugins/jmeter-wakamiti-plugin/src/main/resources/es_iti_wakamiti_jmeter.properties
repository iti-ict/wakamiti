jmeter.define.baseURL= the base URL {text}
jmeter.define.get = (that) a GET is performed to the endpoint {service:text}
jmeter.define.put = (that) a PUT is performed to the endpoint {service:text} with the following message:
jmeter.define.post = (that) a POST is performed to the endpoint {service:text} with the following message:
jmeter.define.csvinput = (that) a POST is performed using a file with the following data {file:text}
jmeter.define.csvinputvariables = (that) a POST is performed using a file with the following data {file:text} working with the variables:
jmeter.define.auth.basic=(that) the service uses basic authentication with the credentials {username:text}:{password:text}
jmeter.define.auth.default=(that) the service uses basic authentication
jmeter.define.cookies = (that) cookies are disabled
jmeter.define.cache = (that) the cache is disabled
jmeter.define.connectiontimeout= (that) a connection timeout of {duration:int} seconds is set
jmeter.define.responsetimeout= (that) a response timeout of {duration:int} minutes is set
jmeter.define.resources= (that) all resources associated with the URL are downloaded
jmeter.define.proxy= (that) a proxy server is used at the URL {url:text}

jmeter.extract.regex.get= (that) a GET is performed to the endpoint {service:text} and the value is extracted using the regular expression {regex:text} storing it in {variableName:text}
jmeter.extract.boundaries.get= (that) a GET is performed to the endpoint {service:text} and the value is extracted between {leftBoundary:text} and {rightBoundary:text} storing it in {variableName:text}
jmeter.extract.json.get= (that) a GET is performed to the endpoint {service:text} and the value at the Json Path {jsonPath:text} is extracted storing it in {variableName:text}
jmeter.extract.put= (that) a PUT is performed to the endpoint {service:text} with the stored variable {variableName:text} as the message body
jmeter.extract.post= (that) a POST is performed to the endpoint {service:text} with the stored variable {variableName:text} as the message body
jmeter.extract.endpoint.get= (that) a GET is performed to the endpoint {service:text} / and the previously extracted variable {variableName:text}
jmeter.extract.endpoint.put= (that) a PUT is performed to the endpoint {service:text} / and the previously extracted variable {variableName:text} with the following message:
jmeter.extract.endpoint.post= (that) a POST is performed to the endpoint {service:text} / and the previously extracted variable {variableName:text} with the following message:

jmeter.test.jmxfile= the test plan from the JMX file {file:text} is executed
jmeter.test.foamtest= a smoke test is executed
jmeter.test.loadtest= a load test with {users:int} users for {duration:int} minutes is executed
jmeter.test.stresstest= a stress test starting with {users:int} users, increasing by {usersIncrease:int} up to {maxUsers:int} users over {duration:int} minutes is executed
jmeter.test.peaktest= a peak test with {peaks:int} peaks of {peakUsers:int} users, dropping to {nonPeakUsers:int} users over {duration:int} minutes is executed
jmeter.test.limitetest= an operational limit test starting with {users:int} users, increasing by {usersIncrease:int} up to {maxUsers:int} users with ramp-up periods of {duration:int} minutes is executed

jmeter.assert.percentil= check that the {percentile:int} percentile of response time is less than {duration:int} seconds
jmeter.assert.responseTime= check that the average response time is less than {duration:int} seconds
jmeter.assert.percentilms= check that the {percentile:int} percentile of response time is less than {duration:int} milliseconds
jmeter.assert.responseTimems= check that the average response time is less than {duration:int} milliseconds
jmeter.assert.errors= check that the number of requests that returned an error is less than {errors:int}

