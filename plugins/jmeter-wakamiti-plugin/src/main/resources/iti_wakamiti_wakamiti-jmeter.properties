#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
jmeter.define.contentType={word} as content type
jmeter.define.baseURL=the base URL {url}
jmeter.define.http.code.assertion=(that) any request will be successful if its HTTP code {integer-assertion}
jmeter.define.timeout=a timeout of {duration}
jmeter.define.cookies.enable=(that) cookies are enabled
jmeter.define.cookies.disable=(that) cookies are disabled
jmeter.define.cache.enable=(that) cache is enabled
jmeter.define.cache.disable=(that) cache is disabled
jmeter.define.resources.enable=(that) embedded resources will be downloaded
jmeter.define.resources.disable=(that) embedded resources will not be downloaded
jmeter.define.resources.matching=(that) embedded resources matching the {pattern:text} pattern are downloaded
jmeter.define.resources.not.matching=(that) embedded resources that do not match the {pattern:text} pattern are downloaded
jmeter.define.proxy=a proxy with the URL {url}
jmeter.define.proxy.auth=a proxy with the URL {url} and credentials {username:text}:{password:text}

jmeter.define.auth.basic=the service uses the basic authentication credentials {username:text}:{password:text}
jmeter.define.auth.bearer.token=the service uses the oauth authentication token {text}
jmeter.define.auth.bearer.token.file=the service uses the oauth authentication token from the file {file}
jmeter.define.auth.bearer.default=the service uses the oauth authentication
jmeter.define.auth.bearer.password=the service uses the oauth authentication credentials {username:text}:{password:text}
jmeter.define.auth.bearer.password.parameters=\
  the service uses the oauth authentication credentials {username:text}:{password:text} with the following parameters:
jmeter.define.auth.bearer.client=the service uses the oauth authentication client credentials
jmeter.define.auth.bearer.client.parameters=\
  the service uses the oauth authentication client credentials with the following parameters:
jmeter.define.auth.none=the service does not use authentication

jmeter.define.dataset.file=the data in file {file}
jmeter.define.dataset.vars=the following variables:
jmeter.define.dataset.var=variable {name:text} with value {value:text}

jmeter.define.request=a {method:word} call to the service {service:text}
jmeter.define.request.body.data=with the following data:
jmeter.define.request.body.file=with the data from the file {file}
jmeter.define.request.parameters=with the following parameters:
jmeter.define.request.parameter=with the parameter {name:text} with value {value:text}
jmeter.define.request.headers=with the following headers:
jmeter.define.request.header=with the header {name:text} with value {value:text}
jmeter.define.request.form.parameters=with the following form parameters:
jmeter.define.request.form.parameter=with the form parameter {name:text} with value {value:text}
jmeter.define.request.attached.file=with the attached file {file} named {name:text}
jmeter.define.request.extractor.regex=with the regular expression {regex:text} extracted in the variable {name:text}
jmeter.define.request.extractor.json=with json value {query:text} extracted in the variable {name:text}
jmeter.define.request.extractor.boundary=with the fragment between {leftBoundary:text} and {rightBoundary:text} extracted in the variable {name:text}

jmeter.execute.simple={threads:int} thread(s) (is|are) executed
jmeter.execute.load.duration={threads:int} thread(s) (is|are) executed in {ramp:duration} holding {hold:duration}
jmeter.execute.load.iterations={threads:int} thread(s) (is|are) executed in {ramp:duration} {iterations:int} time(s)
# Commented steps require changes to the functionality of the metric data type.
#jmeter.execute.load.while.long={threads:int} thread(s) (is|are) executed in {ramp:duration} while the {metric:long-metric} {matcher:long-assertion}
#jmeter.execute.load.while.double={threads:int} thread(s) (is|are) executed in {ramp:duration} while the {metric:double-metric} {matcher:double-assertion}
jmeter.execute.increase.iterations={threads:int} thread(s) (is|are) executed in {ramp:duration} every {hold:duration} {iterations:int} time(s)
#jmeter.execute.increase.while.long=\
#  {threads:int} thread(s) (is|are) executed in {ramp:duration} every {hold:duration} while the {metric:long-metric} {matcher:long-assertion}
#jmeter.execute.increase.while.double=\
#  {threads:int} thread(s) (is|are) executed in {ramp:duration} every {hold:duration} while the {metric:double-metric} {matcher:double-assertion}
jmeter.execute.stretches=a test is executed with the following stretches:

jmeter.assert.metric.duration=the {metric:duration-metric} {matcher:duration-assertion}
jmeter.assert.metric.long=the {metric:long-metric} {matcher:long-assertion}
jmeter.assert.metric.double=the {metric:double-metric} {matcher:double-assertion}

