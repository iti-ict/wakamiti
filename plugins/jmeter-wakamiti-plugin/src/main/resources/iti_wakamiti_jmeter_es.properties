#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
jmeter.define.contentType={word} como el tipo de contenido
jmeter.define.baseURL=la URL base {url}
jmeter.define.http.code.assertion=(que) toda petición se considera satisfactoria si su código HTTP {integer-assertion}
jmeter.define.timeout=un timeout de {duration}
jmeter.define.cookies.enable=las cookies activadas
jmeter.define.cookies.disable=las cookies desactivadas
jmeter.define.cache.enable=la caché activada
jmeter.define.cache.disable=la caché desactivada
jmeter.define.resources.enable=(que) se descargan los recursos
jmeter.define.resources.disable=(que) no se descargan los recursos
jmeter.define.resources.matching=(que) se descargan los recursos embebidos que cumplen el patrón {pattern:text}
jmeter.define.resources.not.matching=(que) no se descargan los recursos embebidos que cumplen el patrón {pattern:text}
jmeter.define.proxy=un proxy con la URL {url}
jmeter.define.proxy.auth=un proxy con la URL {url:url} y las credenciales {username:text}:{password:text}

jmeter.define.auth.basic=(que) el servicio usa autenticación básica con las credenciales {username:text}:{password:text}
jmeter.define.auth.bearer.token=(que) el servicio usa autenticación oauth con el token {text}
jmeter.define.auth.bearer.token.file=(que) el servicio usa autenticación oauth con el token del fichero {file}
jmeter.define.auth.bearer.default=(que) el servicio usa autenticación oauth
jmeter.define.auth.bearer.password=(que) el servicio usa autenticación oauth con las credenciales {username:text}:{password:text}
jmeter.define.auth.bearer.password.parameters=\
  (que) el servicio usa autenticación oauth con las credenciales {username:text}:{password:text} y los siguientes parámetros:
jmeter.define.auth.bearer.client=(que) el servicio usa autenticación oauth con las credenciales del cliente
jmeter.define.auth.bearer.client.parameters=\
  (que) el servicio usa autenticación oauth con las credenciales del cliente y los siguientes parámetros:
jmeter.define.auth.none=(que) el servicio no usa autenticación

jmeter.define.dataset.file=los datos del fichero {file}
jmeter.define.dataset.vars=las siguientes variables:
jmeter.define.dataset.var=la variable {name:text} con el valor {value:text}

jmeter.define.request=una llamada {method:word} al servicio {service:text}
jmeter.define.request.body.data=con los siguientes datos:
jmeter.define.request.body.file=con los datos del fichero {file}
jmeter.define.request.parameters=con los siguientes parámetros:
jmeter.define.request.parameter=con el parámetro {name:text} con el valor {value:text}
jmeter.define.request.headers=con las siguientes cabeceras:
jmeter.define.request.header=con la cabecera {name:text} con el valor {value:text}
jmeter.define.request.form.parameters=con los siguientes parámetros de formulario:
jmeter.define.request.form.parameter=con el parámetro de formulario {name:text} con el valor {value:text}
jmeter.define.request.attached.file=con el fichero adjunto {name:text} con el contenido del fichero {file}
jmeter.define.request.extractor.regex=con la expresión regular {regex:text} extraída en la variable {name:text}
jmeter.define.request.extractor.json=con el valor json {query:text} extraído en la variable {name:text}
jmeter.define.request.extractor.boundary=con el fragmento entre {leftBoundary:text} y {rightBoundary:text} extraído en la variable {name:text}

jmeter.execute.simple=se ejecuta(n) {threads:int} hilo(s)
jmeter.execute.load.duration=se ejecuta(n) {threads:int} hilo(s) en {ramp:duration} manteniendo {hold:duration}
jmeter.execute.load.iterations=se ejecuta(n) {threads:int} hilo(s) en {ramp:duration} {iterations:int} ve(z|ces)
# Commented steps require changes to the functionality of the metric data type.
#jmeter.execute.load.while.long=se ejecuta(n) {threads:int} hilo(s) en {ramp:duration} mientras el {metric:long-metric} {matcher:long-assertion}
#jmeter.execute.load.while.double=se ejecuta(n) {threads:int} hilo(s) en {ramp:duration} mientras el {metric:double-metric} {matcher:double-assertion}
jmeter.execute.increase.iterations=se ejecuta(n) {threads:int} hilo(s) en {ramp:duration} cada {hold:duration} {iterations:int} ve(z|ces)
#jmeter.execute.increase.while.long=\
#  se ejecuta(n) {threads:int} hilo(s) en {ramp:duration} cada {hold:duration} hasta que el {metric:long-metric} {matcher:long-assertion}
#jmeter.execute.increase.while.double=\
#  se ejecuta(n) {threads:int} hilo(s) en {ramp:duration} cada {hold:duration} hasta que el {metric:double-metric} {matcher:double-assertion}
jmeter.execute.stretches=se ejecuta(n) (el|los) siguiente(s) tramo(s):


jmeter.assert.metric.duration=(el|la) {metric:duration-metric} {matcher:duration-assertion}
jmeter.assert.metric.long=el {metric:long-metric} {matcher:long-assertion}
jmeter.assert.metric.double=el {metric:double-metric} {matcher:double-assertion}
