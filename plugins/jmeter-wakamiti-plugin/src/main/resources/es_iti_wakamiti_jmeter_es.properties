jmeter.define.baseURL= la URL base {text}
jmeter.define.get = (que) hago un GET al endpoint {service:text}
jmeter.define.put = (que) hago un PUT al endpoint {service:text} con el siguiente mensaje:
jmeter.define.post = (que) hago un POST al endpoint {service:text} con el siguiente mensaje:
jmeter.define.csvinput = un fichero con los siguientes datos {fichero:text}
jmeter.define.csvinputvariables = un fichero con los siguientes datos {fichero:text} trabajando con las variables:
jmeter.define.auth.basic=(que) el servicio usa autenticación básica con las credenciales {username:text}:{password:text}
jmeter.define.auth.default=(que) el servicio usa autenticación básica
jmeter.define.cookies = (que) deshabilito las cookies
jmeter.define.cache = (que) deshabilito la cache
jmeter.define.connectiontimeout= (que) establezco un timeout de conexión de {duracion:int} segundos
jmeter.define.responsetimeout= (que) establezco un timeout de respuesta de {duracion:int} minutos
jmeter.define.resources= (que) descargo todos los recursos asociados a la URL
jmeter.define.proxy= (que) se utiliza un servidor proxy en la URL {URL:text}
jmeter.define.responsecode= (que) considero el código de respuesta HTTP {responseCode:int} como exitoso

jmeter.extract.regex.get= (que) hago un GET al endpoint {service:text} y extraigo el valor utilizando expresión regular {regex:text} y lo almaceno en {variableName:text}
jmeter.extract.boundaries.get= (que) hago un GET al endpoint {service:text} y extraigo el valor entre {leftBoundary:text} y {rightBoundary:text} y lo almaceno en {variableName:text}
jmeter.extract.json.get= (que) hago un GET al endpoint {service:text} y extraigo el valor en el Json Path {jsonPath:text} y lo almaceno en {variableName:text}
jmeter.extract.put= (que) hago un PUT al endpoint {service:text} con la variable almacenada {variableName:text} como cuerpo del mensaje
jmeter.extract.post= (que) hago un POST al endpoint {service:text} con la variable almacenada {variableName:text} como cuerpo del mensaje

jmeter.test.jmxfile= ejecuto el test plan del archivo JMX {archivo:text}
jmeter.test.foamtest= ejecuto una prueba de humo
jmeter.test.loadtest= ejecuto una prueba de carga con {usuarios:int} usuarios durante {duracion:int} minutos
jmeter.test.stresstest= ejecuto una prueba de estrés comenzando con {usuarios:int} usuarios, incrementando en {incrementoUsuarios:int} hasta {maxUsuarios:int} usuarios durante {duracion:int} minutos
jmeter.test.peaktest= ejecuto una prueba de picos con {numeroPicos:int} picos de {usuariosPico:int} usuarios, bajando a {usuariosFueraPico:int} usuarios durante {duracion:int} minutos
jmeter.test.limitetest= ejecuto una prueba de límite operativo comenzando con {usuarios:int} usuarios, incrementando en {incrementoUsuarios:int} hasta {maxUsuarios:int} usuarios con con rampas de subida de {duracion:int} minutos

jmeter.assert.percentil= comprueba que el percentil {percentil:int} de tiempo de respuesta es menor que {duracionTest:int} segundos
jmeter.assert.responseTime= comprueba que el tiempo de respuesta medio es menor que {duracionTest:int} segundos
jmeter.assert.errors= comprueba que el número de peticiones que han devuelto error es menor que {errores:int}