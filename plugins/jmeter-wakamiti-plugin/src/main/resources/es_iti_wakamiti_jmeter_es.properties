jmeter.define.baseURL= la URL base {text}
jmeter.define.get = (que) se realiza un GET al endpoint {service:text}
jmeter.define.put = (que) se realiza un PUT al endpoint {service:text} con el siguiente mensaje:
jmeter.define.post = (que) se realiza un POST al endpoint {service:text} con el siguiente mensaje:
jmeter.define.csvinput = (que) se realiza un POST usando un fichero con los siguientes datos {file:text}
jmeter.define.csvinputvariables = (que) se realiza un POST usando un fichero con los siguientes datos {file:text} trabajando con las variables:
jmeter.define.auth.basic=(que) el servicio usa autenticación básica con las credenciales {username:text}:{password:text}
jmeter.define.auth.default=(que) el servicio usa autenticación básica
jmeter.define.cookies = (que) se deshabilitan las cookies
jmeter.define.cache = (que) se deshabilita la caché
jmeter.define.connectiontimeout= (que) se establece un timeout de conexión de {duration:int} segundos
jmeter.define.responsetimeout= (que) se establece un timeout de respuesta de {duration:int} minutos
jmeter.define.resources= (que) se descargan todos los recursos asociados a la URL
jmeter.define.proxy= (que) se utiliza un servidor proxy en la URL {url:text}

jmeter.extract.regex.get= (que) se realiza un GET al endpoint {service:text} y se extrae el valor utilizando la expresión regular {regex:text} almacenándolo en {variableName:text}
jmeter.extract.boundaries.get= (que) se realiza un GET al endpoint {service:text} y se extrae el valor entre {leftBoundary:text} y {rightBoundary:text} almacenándolo en {variableName:text}
jmeter.extract.json.get= (que) se realiza un GET al endpoint {service:text} y se extrae el valor en el Json Path {jsonPath:text} almacenándolo en {variableName:text}
jmeter.extract.put= (que) se realiza un PUT al endpoint {service:text} con la variable almacenada {variableName:text} como cuerpo del mensaje
jmeter.extract.post= (que) se realiza un POST al endpoint {service:text} con la variable almacenada {variableName:text} como cuerpo del mensaje
jmeter.extract.endpoint.get= (que) se realiza un GET al endpoint {service:text} / y la variable {variableName:text} extraida previamente
jmeter.extract.endpoint.put= (que) se realiza un PUT al endpoint {service:text} / y la variable {variableName:text} extraida previamente con el siguiente mensaje:
jmeter.extract.endpoint.post= (que) se realiza un POST al endpoint {service:text} / y la variable {variableName:text} extraida previamente con el siguiente mensaje:

jmeter.test.jmxfile= se ejecuta el test plan del archivo JMX {file:text}
jmeter.test.foamtest= se ejecuta una prueba de humo
jmeter.test.loadtest= se ejecuta una prueba de carga con {users:int} usuarios durante {duration:int} minutos
jmeter.test.stresstest= se ejecuta una prueba de estrés comenzando con {users:int} usuarios, incrementando en {usersIncrease:int} hasta {maxUsers:int} usuarios durante {duration:int} minutos
jmeter.test.peaktest= se ejecuta una prueba de picos con {peaks:int} picos de {peakUsers:int} usuarios, bajando a {nonPeakUsers:int} usuarios durante {duration:int} minutos
jmeter.test.limitetest= se ejecuta una prueba de límite operativo comenzando con {users:int} usuarios, incrementando en {usersIncrease:int} hasta {maxUsers:int} usuarios con con rampas de subida de {duration:int} minutos

jmeter.assert.percentil= comprueba que el percentil {percentile:int} de tiempo de respuesta es menor que {duration:int} segundos
jmeter.assert.responseTime= comprueba que el tiempo de respuesta medio es menor que {duration:int} segundos
jmeter.assert.percentilms= comprueba que el percentil {percentile:int} de tiempo de respuesta es menor que {duration:int} milisegundos
jmeter.assert.responseTimems= comprueba que el tiempo de respuesta medio es menor que {duration:int} milisegundos
jmeter.assert.errors= comprueba que el número de peticiones que han devuelto error es menor que {errors:int}
